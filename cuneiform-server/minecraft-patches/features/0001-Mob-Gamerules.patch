From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lexie Malina <alex@t-ch.net>
Date: Mon, 23 Jun 2025 14:12:58 -0500
Subject: [PATCH] Mob Gamerules


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 5e3be75b27ed609be005e8169dc84c125518253e..6e83aa565386f9900dc1761490f13eeab14070e7 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -99,7 +99,11 @@ import net.minecraft.world.entity.ai.village.poi.PoiTypes;
 import net.minecraft.world.entity.animal.horse.SkeletonHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.boss.wither.WitherBoss;
+import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.LargeFireball;
+import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.entity.raid.Raids;
 import net.minecraft.world.flag.FeatureFlagSet;
@@ -2003,6 +2007,17 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             case TRIGGER -> Explosion.BlockInteraction.TRIGGER_BLOCK;
             case STANDARD -> Explosion.BlockInteraction.DESTROY; // CraftBukkit - handle custom explosion type
         };
+        // Cuneiform START - Explosion mobGriefing.
+        if (explosionInteraction == ExplosionInteraction.MOB) {
+            switch (source ) {
+                case WitherSkull ignored -> blockInteraction = this.getGameRules().getBoolean(GameRules.RULE_WITHER_GRIEFING) ? blockInteraction : Explosion.BlockInteraction.KEEP;
+                case WitherBoss ignored -> blockInteraction = this.getGameRules().getBoolean(GameRules.RULE_WITHER_GRIEFING) ? blockInteraction : Explosion.BlockInteraction.KEEP;
+                case Creeper ignored -> blockInteraction = this.getGameRules().getBoolean(GameRules.RULE_CREEPER_GRIEFING) ? blockInteraction : Explosion.BlockInteraction.KEEP;
+                case LargeFireball ignored -> blockInteraction = this.getGameRules().getBoolean(GameRules.RULE_GHAST_GRIEFING) ? blockInteraction : Explosion.BlockInteraction.KEEP;
+                case null, default -> {}
+            }
+        }
+        // Cuneiform END
         Vec3 vec3 = new Vec3(x, y, z);
         ServerExplosion serverExplosion = new ServerExplosion(this, source, damageSource, damageCalculator, vec3, radius, fire, blockInteraction);
         if (configurator != null) configurator.accept(serverExplosion);// Paper - Allow explosions to damage source
diff --git a/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java b/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java
index e026e07ca86700c864a3dceda6817fb7b6cb11e9..56ab852725e1a96a270a3d673988167261dee86e 100644
--- a/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java
+++ b/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java
@@ -31,6 +31,7 @@ public class BreakDoorGoal extends DoorInteractGoal {
     public boolean canUse() {
         return super.canUse()
             && getServerLevel(this.mob).getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)
+            && getServerLevel(this.mob).getGameRules().getBoolean(GameRules.RULE_BREAK_DOORS) // Cuneiform Add more gamerules for mobGriefing.
             && this.isValidDifficulty(this.mob.level().getDifficulty())
             && !this.isOpen();
     }
diff --git a/net/minecraft/world/entity/ambient/Bat.java b/net/minecraft/world/entity/ambient/Bat.java
index 912b099a51269f92f250c7d6094ad41817749f93..0889f50183d84002ba3859b55f24c0e47067ee57 100644
--- a/net/minecraft/world/entity/ambient/Bat.java
+++ b/net/minecraft/world/entity/ambient/Bat.java
@@ -22,6 +22,7 @@ import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
@@ -228,6 +229,10 @@ public class Bat extends AmbientCreature {
     public static boolean checkBatSpawnRules(
         EntityType<Bat> entityType, LevelAccessor level, EntitySpawnReason spawnReason, BlockPos pos, RandomSource randomSource
     ) {
+//        Cuneiform START - Bat Gamerules
+        if (!level.getMinecraftWorld().getGameRules().getBoolean(GameRules.RULE_DO_BAT_SPAWN))
+            return false;
+//        Cuneiform END
         if (pos.getY() >= level.getHeightmapPos(Heightmap.Types.WORLD_SURFACE, pos).getY()) {
             return false;
         } else {
diff --git a/net/minecraft/world/entity/boss/wither/WitherBoss.java b/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 787b74c5aa02afc4ba95fa1cdaf6cc21b6554b56..bbb88a8114784904606d1a4f6e969b534d7814f8 100644
--- a/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -348,7 +348,7 @@ public class WitherBoss extends Monster implements RangedAttackMob {
 
             if (this.destroyBlocksTick > 0) {
                 this.destroyBlocksTick--;
-                if (this.destroyBlocksTick == 0 && level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+                if (this.destroyBlocksTick == 0 && (level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && level.getGameRules().getBoolean(GameRules.RULE_WITHER_GRIEFING))) { // Cuneiform - Add more gamerules for mobGriefing.
                     boolean flag = false;
                     int alternativeTarget = Mth.floor(this.getBbWidth() / 2.0F + 1.0F);
                     int floor = Mth.floor(this.getBbHeight());
diff --git a/net/minecraft/world/entity/monster/EnderMan.java b/net/minecraft/world/entity/monster/EnderMan.java
index 4edd94ac765d2ab107612504b67e6e07da609313..a985e6fe62b60802c37133d177e5323e7e180817 100644
--- a/net/minecraft/world/entity/monster/EnderMan.java
+++ b/net/minecraft/world/entity/monster/EnderMan.java
@@ -626,6 +626,7 @@ public class EnderMan extends Monster implements NeutralMob {
         public boolean canUse() {
             return this.enderman.getCarriedBlock() == null
                 && getServerLevel(this.enderman).getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)
+                && getServerLevel(this.enderman).getGameRules().getBoolean(GameRules.RULE_ENDERMAN_GRIEFING)
                 && this.enderman.getRandom().nextInt(reducedTickDelay(20)) == 0;
         }
 
diff --git a/net/minecraft/world/level/GameRules.java b/net/minecraft/world/level/GameRules.java
index d5536dd40a1e9a2e05967652f690abbbca287852..f44497f04a06f9d80bd0101345f339b8d6a8b044 100644
--- a/net/minecraft/world/level/GameRules.java
+++ b/net/minecraft/world/level/GameRules.java
@@ -240,6 +240,35 @@ public class GameRules {
             }
         }))
     );
+
+//     Cuneiform START - Gamerules
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_DO_BAT_SPAWN = register(
+        "doBatSpawn", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(false)
+    );
+
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_WITHER_GRIEFING = register(
+        "witherGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(false)
+    );
+
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_CREEPER_GRIEFING = register(
+        "creeperGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(false)
+    );
+
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_ENDERMAN_GRIEFING = register(
+        "endermanGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(false)
+    );
+
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_GHAST_GRIEFING = register(
+        "ghastGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(false)
+    );
+
+    public static final GameRules.Key<GameRules.BooleanValue> RULE_BREAK_DOORS = register(
+        "breakDoors", GameRules.Category.MOBS, GameRules.BooleanValue.create(false)
+    );
+//    Cuneiform END
+
+
+
     private final Map<GameRules.Key<?>, GameRules.Value<?>> rules;
     private final FeatureFlagSet enabledFeatures;
     private final GameRules.Value<?>[] gameruleArray; // Paper - Perf: Use array for gamerule storage
