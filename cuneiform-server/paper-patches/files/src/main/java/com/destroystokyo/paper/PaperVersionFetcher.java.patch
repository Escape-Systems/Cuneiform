--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -1,10 +_,7 @@
 package com.destroystokyo.paper;
 
 import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.common.io.Resources;
 import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
 import com.mojang.logging.LogUtils;
@@ -35,7 +_,7 @@
     private static final Logger LOGGER = LogUtils.getClassLogger();
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
-    private static final String DOWNLOAD_PAGE = "https://papermc.io/downloads/paper";
+    private static final String DOWNLOAD_PAGE = "https://github.com/Escape-Systems/Cuneiform/";
 
     @Override
     public long getCacheTime() {
@@ -60,15 +_,17 @@
         int distance = DISTANCE_ERROR;
 
         final OptionalInt buildNumber = build.buildNumber();
-        if (buildNumber.isPresent()) {
-            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
-        } else {
+// Cuneiform START - Paper is not going to let me use their api, so lets not even try
+//        if (buildNumber.isPresent()) {
+//            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
+//        } else {
+// Cuneiform END
             final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
                 distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
             }
-        }
+//        } // Cuneiform - Paper is not going to let me use their api, so lets not even try
 
         return switch (distance) {
             case DISTANCE_ERROR -> text("Error obtaining version information", NamedTextColor.YELLOW);
@@ -82,29 +_,30 @@
                         .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
         };
     }
-
-    private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
-        try {
-            try (final BufferedReader reader = Resources.asCharSource(
-                URI.create("https://api.papermc.io/v2/projects/folia/versions/" + build.minecraftVersionId()).toURL(), // Folia
-                StandardCharsets.UTF_8
-            ).openBufferedStream()) {
-                final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                final JsonArray builds = json.getAsJsonArray("builds");
-                final int latest = StreamSupport.stream(builds.spliterator(), false)
-                    .mapToInt(JsonElement::getAsInt)
-                    .max()
-                    .orElseThrow();
-                return latest - jenkinsBuild;
-            } catch (final JsonSyntaxException ex) {
-                LOGGER.error("Error parsing json from Paper's downloads API", ex);
-                return DISTANCE_ERROR;
-            }
-        } catch (final IOException e) {
-            LOGGER.error("Error while parsing version", e);
-            return DISTANCE_ERROR;
-        }
-    }
+// Cuneiform START - Paper is not going to let me use their api, so lets not even try
+//    private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
+//        try {
+//            try (final BufferedReader reader = Resources.asCharSource(
+//                URI.create("https://api.papermc.io/v2/projects/folia/versions/" + build.minecraftVersionId()).toURL(), // Folia
+//                StandardCharsets.UTF_8
+//            ).openBufferedStream()) {
+//                final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+//                final JsonArray builds = json.getAsJsonArray("builds");
+//                final int latest = StreamSupport.stream(builds.spliterator(), false)
+//                    .mapToInt(JsonElement::getAsInt)
+//                    .max()
+//                    .orElseThrow();
+//                return latest - jenkinsBuild;
+//            } catch (final JsonSyntaxException ex) {
+//                LOGGER.error("Error parsing json from Paper's downloads API", ex);
+//                return DISTANCE_ERROR;
+//            }
+//        } catch (final IOException e) {
+//            LOGGER.error("Error while parsing version", e);
+//            return DISTANCE_ERROR;
+//        }
+//    }
+// Cuneiform END
 
     // Contributed by Techcable <Techcable@outlook.com> in GH-65
     private static int fetchDistanceFromGitHub(final String repo, final String branch, final String hash) {
