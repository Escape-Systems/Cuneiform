--- a/folia-server/build.gradle.kts
+++ b/folia-server/build.gradle.kts
@@ -1,10 +_,9 @@
 import io.papermc.fill.model.BuildChannel
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
-import io.papermc.paperweight.util.data.FileEntry
-import paper.libs.com.google.gson.annotations.SerializedName
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
+import io.papermc.paperweight.util.upstreamsDirectory
 import java.time.Instant
-import kotlin.io.path.readText
 
 plugins {
     `java-library`
@@ -26,7 +_,8 @@
     minecraftVersion = providers.gradleProperty("mcVersion")
     gitFilePatches = false
     
-    val fork = forks.register("folia") {
+    val folia = forks.register("folia") {
+        rootDirectory = upstreamsDirectory().map { it.dir("folia") }
         upstream.patchDir("paperServer") {
             upstreamPath = "paper-server"
             excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
@@ -35,7 +_,28 @@
         }
     }
 
-    activeFork = fork
+    val cuneiform = forks.register("cuneiform") {
+        forks = folia
+        upstream.patchRepo("paperServer") {
+            upstreamRepo = folia.patchedRepo("paperServer")
+            patchesDir = rootDirectory.dir("cuneiform-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+        upstream.patchDir("foliaServer") {
+            upstreamPath = "folia-server"
+            excludes = setOf(
+                "src/minecraft",
+                "paper-patches",
+                "minecraft-patches",
+                "build.gradle.kts",
+                "build.gradle.kts.patch"
+            )
+            patchesDir = rootDirectory.dir("cuneiform-server/folia-patches")
+            outputDir = rootDirectory.dir("folia-server")
+        }
+    }
+
+    activeFork = cuneiform
 
 
     spigot {
@@ -71,6 +_,7 @@
     @get:Inject
     abstract val archiveOperations: ArchiveOperations
 }
+
 val services = objects.newInstance<Services>()
 
 if (project.providers.gradleProperty("publishDevBundle").isPresent) {
@@ -84,7 +_,10 @@
     devBundleComponent.addVariantsFromConfiguration(devBundle.get()) {}
 
     val runtime = configurations.consumable("serverRuntimeClasspath") {
-        attributes.attribute(DevBundleOutput.ATTRIBUTE, objects.named(DevBundleOutput.SERVER_DEPENDENCIES))
+        attributes.attribute(
+            DevBundleOutput.ATTRIBUTE,
+            objects.named(DevBundleOutput.SERVER_DEPENDENCIES)
+        )
         attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.JAVA_RUNTIME))
         extendsFrom(configurations.runtimeClasspath.get())
     }
@@ -93,7 +_,10 @@
     }
 
     val compile = configurations.consumable("serverCompileClasspath") {
-        attributes.attribute(DevBundleOutput.ATTRIBUTE, objects.named(DevBundleOutput.SERVER_DEPENDENCIES))
+        attributes.attribute(
+            DevBundleOutput.ATTRIBUTE,
+            objects.named(DevBundleOutput.SERVER_DEPENDENCIES)
+        )
         attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.JAVA_API))
         extendsFrom(configurations.compileClasspath.get())
     }
@@ -123,10 +_,13 @@
     main {
         java { srcDir("../paper-server/src/main/java"); srcDir("../paper-server/src/generated/java") }
         resources { srcDir("../paper-server/src/main/resources") }
-    }
+        java { srcDir("../folia-server/src/test/java") }
+        resources { srcDir("../folia-server/src/test/resources") }}
     test {
         java { srcDir("../paper-server/src/test/java") }
         resources { srcDir("../paper-server/src/test/resources") }
+        java { srcDir("../folia-server/src/test/java") }
+        resources { srcDir("../folia-server/src/test/resources") }
     }
 }
 val log4jPlugins = sourceSets.create("log4jPlugins") {
@@ -143,6 +_,7 @@
 
 // Configure mockito agent that is needed in newer java versions
 val mockitoAgent = configurations.register("mockitoAgent")
+
 abstract class MockitoAgentProvider : CommandLineArgumentProvider {
     @get:CompileClasspath
     abstract val fileCollection: ConfigurableFileCollection
@@ -153,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":folia-api"))
+    implementation(project(":cuneiform-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -176,6 +_,7 @@
         isTransitive = false
     }
     implementation("io.netty:netty-codec-haproxy:4.1.118.Final") // Add support for proxy protocol
+    implementation("org.apache.logging.log4j:log4j-layout-template-json:2.24.1") // Cuneiform - JSON Logging
     implementation("org.apache.logging.log4j:log4j-iostreams:2.24.1")
     implementation("org.ow2.asm:asm-commons:9.8")
     implementation("org.spongepowered:configurate-yaml:4.2.0-20250225.064233-199")
@@ -225,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Folia",
+            "Implementation-Title" to "Cuneiform",
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "Folia",
+            "Specification-Title" to "Cuneiform",
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Paper Team",
-            "Brand-Id" to "papermc:folia",
-            "Brand-Name" to "Folia",
+            "Specification-Vendor" to "Escape Systems",
+            "Brand-Id" to "esc:cuneiform",
+            "Brand-Name" to "Cuneiform",
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
